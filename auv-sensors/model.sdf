<?xml version="1.0" ?>
<sdf version="1.5">
  <model name="auv_sensor">

  <link name="sen_front">
<!-- Add a ray sensor, and give it a name -->

	<sensor type="ray" name="sensor_front">

	  <!-- Position the ray sensor based on the specification. Also rotate
	       it by 90 degrees around the X-axis so that the <horizontal> rays
	       become vertical -->
	  <pose>1 0 -0.01 0 1.5707 0</pose>

	  <!-- Enable visualization to see the rays in the GUI -->
	  <visualize>true</visualize>

	  <!-- Set the update rate of the sensor -->
	  <update_rate>30</update_rate>
	<ray>

	<noise>
      <!-- Use gaussian noise -->
      <type>gaussian</type>
      <mean>0.0</mean>
      <stddev>0.02</stddev>
    </noise>

  <!-- The scan element contains the horizontal and vertical beams.
       We are leaving out the vertical beams for this tutorial. -->
  <scan>

    <!-- The horizontal beams -->
    <horizontal>
      <!-- The velodyne has 'n' number of beams(samples) -->
      <samples>7</samples>

      <!-- Resolution is multiplied by samples to determine number of
           simulated beams vs interpolated beams. See:
           http://sdformat.org/spec?ver=1.6&elem=sensor#horizontal_resolution
           -->
      <resolution>1</resolution>

      <!-- Minimum angle in radians -->
      <min_angle>-0.523599</min_angle>

      <!-- Maximum angle in radians -->
      <max_angle>0.523599</max_angle>
    </horizontal>
  </scan>

  <!-- Range defines characteristics of an individual beam -->
  <range>

    <!-- Minimum distance of the beam -->
    <min>0.05</min>

    <!-- Maximum distance of the beam -->
    <max>70</max>

    <!-- Linear resolution of the beam -->
    <resolution>0.02</resolution>
  </range>
</ray>
</sensor>

	<sensor type="ray" name="sensor_mid">

	  <!-- Position the ray sensor based on the specification. Also rotate
	       it by 90 degrees around the X-axis so that the <horizontal> rays
	       become vertical -->
	  <pose>0 0 -0.01 0 1.5707 0</pose>

	  <!-- Enable visualization to see the rays in the GUI -->
	  <visualize>true</visualize>

	  <!-- Set the update rate of the sensor -->
	  <update_rate>30</update_rate>
	<ray>

	<noise>
      <!-- Use gaussian noise -->
      <type>gaussian</type>
      <mean>0.0</mean>
      <stddev>0.02</stddev>
    </noise>

  <!-- The scan element contains the horizontal and vertical beams.
       We are leaving out the vertical beams for this tutorial. -->
  <scan>

    <!-- The horizontal beams -->
    <horizontal>
      <!-- The velodyne has 'n' number of beams(samples) -->
      <samples>7</samples>

      <!-- Resolution is multiplied by samples to determine number of
           simulated beams vs interpolated beams. See:
           http://sdformat.org/spec?ver=1.6&elem=sensor#horizontal_resolution
           -->
      <resolution>1</resolution>

      <!-- Minimum angle in radians -->
      <min_angle>-0.523599</min_angle>

      <!-- Maximum angle in radians -->
      <max_angle>0.523599</max_angle>
    </horizontal>
  </scan>

  <!-- Range defines characteristics of an individual beam -->
  <range>

    <!-- Minimum distance of the beam -->
    <min>0.05</min>

    <!-- Maximum distance of the beam -->
    <max>70</max>

    <!-- Linear resolution of the beam -->
    <resolution>0.02</resolution>
  </range>
</ray>
</sensor>

	<sensor type="ray" name="sensor_back">

	  <!-- Position the ray sensor based on the specification. Also rotate
	       it by 90 degrees around the X-axis so that the <horizontal> rays
	       become vertical -->
	  <pose>-1 0 -0.01 0 1.5707 0</pose>

	  <!-- Enable visualization to see the rays in the GUI -->
	  <visualize>true</visualize>

	  <!-- Set the update rate of the sensor -->
	  <update_rate>30</update_rate>
	<ray>

	<noise>
      <!-- Use gaussian noise -->
      <type>gaussian</type>
      <mean>0.0</mean>
      <stddev>0.02</stddev>
    </noise>

  <!-- The scan element contains the horizontal and vertical beams.
       We are leaving out the vertical beams for this tutorial. -->
  <scan>

    <!-- The horizontal beams -->
    <horizontal>
      <!-- The velodyne has 'n' number of beams(samples) -->
      <samples>7</samples>

      <!-- Resolution is multiplied by samples to determine number of
           simulated beams vs interpolated beams. See:
           http://sdformat.org/spec?ver=1.6&elem=sensor#horizontal_resolution
           -->
      <resolution>1</resolution>

      <!-- Minimum angle in radians -->
      <min_angle>-0.523599</min_angle>

      <!-- Maximum angle in radians -->
      <max_angle>0.523599</max_angle>
    </horizontal>
  </scan>

  <!-- Range defines characteristics of an individual beam -->
  <range>

    <!-- Minimum distance of the beam -->
    <min>0.05</min>

    <!-- Maximum distance of the beam -->
    <max>70</max>

    <!-- Linear resolution of the beam -->
    <resolution>0.02</resolution>
  </range>
</ray>
</sensor>

    <!-- Vertically offset the top cylinder by the length of the bottom
        cylinder and half the length of this cylinder. -->
    <pose>1 0 -0.05 0 0 0</pose>
	<inertial>
	     <mass>0.1</mass>
	     <inertia>
	       <ixx>0.0001</ixx>
	       <iyy>0.0001</iyy>
	       <izz>0.0001</izz>
	       <ixy>0</ixy>
	       <ixz>0</ixz>
	       <iyz>0</iyz>
	     </inertia>
   </inertial>

    <collision name="sen_front_collision">
      <geometry>
        <box>
          <!-- Radius and length provided by Velodyne -->
          <size> 2.2 0.2 0.1 </size>
	</box>
      </geometry>
    </collision>

    <!-- The visual is mostly a copy of the collision -->
    <visual name="sen_front_visual">
      <geometry>
        <box>
          <!-- Radius and length provided by Velodyne -->
          <size> 2.2 0.2 0.1 </size>
	</box>
      </geometry>
    </visual>
  </link>

</model>
</sdf>
